apply plugin: 'com.android.application'

android {
    def versionPropsFile = file('version.properties')
    def int version_Code
    def String keyAliasMyCommsRel
    def String keyPassMyCommsRel
    def String keystoreRel
    def String keystorePassRel

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        version_Code = versionProps['VERSION_CODE'].toInteger().intValue()
        keyAliasMyCommsRel = versionProps['KEY_ALIAS']
        keyPassMyCommsRel = versionProps['KEY_PASSWORD']
        keystoreRel = versionProps['STORE_FILE']
        keystorePassRel = versionProps['STORE_PASSWORD']

    } else {
        throw new GradleException("Could not read version.properties!")
    }

    signingConfigs {
        release {
            keyAlias keyAliasMyCommsRel
            keyPassword keyPassMyCommsRel
            storeFile file(keystoreRel)
            storePassword keystorePassRel
        }
    }
    compileSdkVersion 21
    buildToolsVersion '21.1.2'

       defaultConfig {
           applicationId "com.vodafone.mycomms"
           minSdkVersion 15
           targetSdkVersion 21
           versionCode version_Code
           versionName "0.1"
           signingConfig signingConfigs.release
       }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            debuggable true
            testCoverageEnabled = true
        }
    }

    productFlavors {
        i {
            applicationId "com.vodafone.mycomms.i"
            resValue "string", "app_name", "MyComms-i"
        }
        q {
            applicationId "com.vodafone.mycomms.q"
            resValue "string", "app_name", "MyComms-q"
        }
        p {
            applicationId "com.vodafone.mycomms.p"
            resValue "string", "app_name", "MyComms"
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    sourceSets {
        androidTest {
            setRoot('src/test')
        }
    }
}

repositories {
    mavenCentral()

    maven {
        url 'http://lorenzo.villani.me/android-cropimage/'
    }
    maven {
        url 'http://clinker.47deg.com/nexus/content/groups/public'
    }
    maven {
        url 'https://oss.sonatype.org/content/repositories/releases'
    }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //Unit testing
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.17'
    testCompile 'org.robolectric:robolectric:3.0-rc3'
    testCompile 'org.robolectric:shadows-httpclient:3.0-rc3'
    compile 'com.android.support:appcompat-v7:22.0.0'
    compile 'com.android.support:support-v4:22.0.0'
    compile 'com.android.support:recyclerview-v7:21.0.+'
    compile 'me.villani.lorenzo.android:android-cropimage:1.1.0'
    compile 'io.realm:realm-android:0.80.1'
    compile files('lib/gson-2.3.1.jar')
    compile ('com.fortysevendeg.swipelistview:swipelistview:1.0-SNAPSHOT@aar') {
        transitive = true
    }

    compile files('lib/android-framework-library.jar')
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        '../app/src/main/java'
]

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testDebug.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }

}